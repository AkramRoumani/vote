trigger:
- main

variables:
  dockerRegistryServiceConnection: 'dockerRegistryConnection'
  imageRepository: 'mydockeruser/voting-app'
  containerRegistry: 'mydockeruser'
  kubernetesServiceConnection: 'kubernetesServiceConnection'
  aksClusterResourceGroup: 'aks-resource-group'
  aksClusterName: 'aks-cluster'
  azureSubscription: 'azureSubscription'
  servicePrincipalId: 'b5a09f06-a808-4e6e-9db5-ddabfbe5b1b9'
  servicePrincipalKey: 'S9D8Q~sXS3m5P7MkXX0W3nQqkgJizq58NF7YzaM3'
  tenant: 'f3c594df-ac31-4c6f-9e7a-b84feed3a6e4'

stages:
- stage: ProvisionInfrastructure
  variables:
    - group: ServicePrincipalVariables  # Référence au groupe de variables
  jobs:
  - job: Terraform
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - script: |
        echo "Updating Terraform provider configuration..."
        if [ -f main.tf ]; then
          sed -i 's|<your-subscription-id>|$(azureSubscription)|g' main.tf
          sed -i 's|<servicePrincipalId>|$(servicePrincipalId)|g' main.tf
          sed -i 's|<servicePrincipalKey>|$(servicePrincipalKey)|g' main.tf
          sed -i 's|<tenant>|$(tenant)|g' main.tf
        else
          echo "File main.tf not found"
          exit 1
        fi
      displayName: 'Update Terraform Configuration'

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Logging in to Azure CLI..."
          az login --service-principal -u "$(servicePrincipalId)" -p "$(servicePrincipalKey)" --tenant "$(tenant)"
          az account set --subscription "$(azureSubscription)"
          az account show
      displayName: 'Azure CLI Login and Set Subscription'

    - script: |
        #!/bin/bash
        echo "Installing Terraform..."
        curl -LO https://releases.hashicorp.com/terraform/0.14.4/terraform_0.14.4_linux_amd64.zip
        unzip terraform_0.14.4_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        sudo chmod +x /usr/local/bin/terraform
        echo 'export PATH=$PATH:/usr/local/bin' >> ~/.bashrc
        export PATH=$PATH:/usr/local/bin
        terraform -v

        echo "Running Terraform..."
        terraform init
        terraform plan
        terraform apply -auto-approve
      displayName: 'Install and Run Terraform'

- stage: Build
  dependsOn: ProvisionInfrastructure
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        cd frontend
        npm install
        npm run build
      displayName: 'Build Frontend'

    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(containerRegistry)/voting-app-frontend'
        command: 'buildAndPush'
        Dockerfile: '**/frontend/Dockerfile'
        tags: |
          $(Build.BuildId)
      displayName: 'Build and Push Frontend Docker Image'

    - script: |
        cd backend
        npm install
      displayName: 'Install Backend Dependencies'

    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(containerRegistry)/voting-app-backend'
        command: 'buildAndPush'
        Dockerfile: '**/backend/Dockerfile'
        tags: |
          $(Build.BuildId)
      displayName: 'Build and Push Backend Docker Image'

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(azureSubscription)'
              azureResourceGroup: '$(aksClusterResourceGroup)'
              kubernetesCluster: '$(aksClusterName)'
              namespace: 'default'
              command: 'apply'
              useConfigurationFile: true
              configuration: |
                helm upgrade --install frontend ./helm-charts/frontend --set image.repository=$(containerRegistry)/voting-app-frontend --set image.tag=$(Build.BuildId)
                helm upgrade --install backend ./helm-charts/backend --set image.repository=$(containerRegistry)/voting-app-backend --set image.tag=$(Build.BuildId)
            displayName: 'Deploy to AKS'
